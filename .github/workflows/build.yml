name: Upload Model to S3 and deploy on ECS

on:
  push:
    branches:
      - main
env:
  IMAGE_TAG: ghcr.io/gamified-coaching-app/coaching_optimiser:v1.0
  IMAGE_TAG_NAME: CoachingOptimiserDockerImageTag
  CLUSTER_NAME: CoachingOptimiserCluster
  STACK_NAME: CoachingOptimiserStack

jobs:
  upload_model_to_s3:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Ensure assets directory exists and create placeholder if empty
        run: |
          mkdir -p ./model/optimiser/assets
          [ -z "$(ls -A ./model/optimiser/assets)" ] && touch ./model/optimiser/assets/.keep

      - name: Package model artifacts
        run: |
          tar -czvf model.tar.gz -C ./model/export .

      - name: Install Python and boto3
        run: |
          sudo apt-get install python3-pip -y
          pip3 install boto3

      - name: Get highest version folder and increment
        id: get_version
        run: |
          cat << EOF > get_highest_version.py
          import boto3
          import re
          import sys

          s3 = boto3.client('s3')

          def get_highest_version_folder(bucket_name, model_folder):
              response = s3.list_objects_v2(Bucket=bucket_name, Prefix=model_folder)
              version_numbers = []
              if 'Contents' in response:
                  for obj in response['Contents']:
                      folder_name = obj['Key'].split('/')[-2]
                      match = re.match(r'(\d+)', folder_name)
                      if match:
                          version_numbers.append(int(match.group(1)))
              if version_numbers:
                  return max(version_numbers)
              else:
                  return 0

          bucket_name = 'blazemodelsregistry'
          model_folder = 'optimiser/'
          highest_version = get_highest_version_folder(bucket_name, model_folder)
          new_version = highest_version + 1
          print(f'::set-output name=version::{new_version}')
          EOF
          python3 get_highest_version.py

      - name: Upload model artifacts to S3
        run: |
          aws s3 cp model.tar.gz s3://blazemodelsregistry/optimiser/${{ steps.get_version.outputs.version }}/model.tar.gz

      - name: Upload min_max_values.json to S3
        run: |
            aws s3 cp ./model/min_max_values.json s3://blazemodelsregistry/optimiser/${{ steps.get_version.outputs.version }}/min_max_values.json
  
  publish_docker_image:
    needs: upload_model_to_s3
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # Required for GITHUB_TOKEN authentication

    steps:
    - uses: actions/checkout@v2
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: GabrielOppermann
        password: ${{ secrets.DOCKER_PAT }}

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile  
        push: true
        tags: ${{ env.IMAGE_TAG }}
  
  deploy_stack:
    needs: publish_docker_image
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2 

    - name: Deploy CloudFormation Stack
      run: |
        set -e
        echo "Image Tag Name: ${{ env.IMAGE_TAG_NAME }}"
        echo "Image Tag: ${{ env.IMAGE_TAG }}"
        aws cloudformation deploy \
          --template-file infrastructure/template.yaml \
          --stack-name ${{ env.STACK_NAME }} \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides ParameterKey=${{env.IMAGE_TAG_NAME}},ParameterValue=${{env.IMAGE_TAG}} \
          --no-fail-on-empty-changeset \
          --region eu-west-2 \
          --debug
      
    - name: Check CloudFormation Outputs
      run: |
        aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }} \
          --query "Stacks[0].Outputs" \
          --output json

  deploy_container_on_ecs:
    needs: deploy_stack
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2 
  
    - name: Get ECS Service Name
      id: get_ecs_service_name
      run: |
        ecs_service_name=$(aws ecs list-services \
          --cluster ${{ env.CLUSTER_NAME }} \
          --query "serviceArns[0]" \
          --output text)
        echo "ecs_service_name=${ecs_service_name##*/}" >> $GITHUB_ENV
    
    - name: Update ECS deployment
      run: |
        set -e
        aws ecs update-service \
          --cluster ${{ env.CLUSTER_NAME }} \
          --service ${{ env.ecs_service_name }} \
          --force-new-deployment
      shell: /usr/bin/bash -e {0}
      env:
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
        AWS_DEFAULT_REGION: eu-west-2
        AWS_REGION: eu-west-2
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}